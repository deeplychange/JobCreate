//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16
//   float4 light_direction;            // Offset:  144 Size:    16
//   row_major float4x4 bone_transforms[32];// Offset:  160 Size:  2048
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CONSTANT_BUFFER                   cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             0       138  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c144                            Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c142, 4, 0, 1, -2
    def c138, 1, 0, 0, 0
    def c139, 0, 1, 0, 0
    def c140, 0, 0, 1, 0
    def c141, 0, 0, 0, 1
    def c143, 0, 0, 0, 0
    defi i0, 4, 0, 1, 0
    dcl_texcoord v0  // position<0,1,2,3>
    dcl_texcoord1 v1  // normal<0,1,2,3>
    dcl_texcoord2 v2  // texcoord<0,1>
    dcl_texcoord3 v3  // bone_weights<0,1,2,3>
    dcl_texcoord4 v4  // bone_indices<0,1,2,3>

#line 12 "F:\ÂãâÂº∑\Â∞±ËÅ∑‰ΩúÂìÅ\ÈÄî‰∏≠\HelloWorld\JobCreate\skinned_mesh_vs.hlsl"
    if_lt c138.w, v3.x
      mov r0.xyz, c138.w  // ::p<0,1,2>
      mov r1.xyz, c138.w  // ::n<0,1,2>
      loop aL, i0
        dp4 r0.w, v3, c138[aL]
        dp4 r1.w, v4, c138[aL]
        mul r1.w, r1.w, c142.x
        mova a0.x, r1.w
        mul r2.xyz, v0.x, c10[a0.x]
        mul r3.xyz, v0.y, c11[a0.x]
        add r2.xyz, r2, r3
        mul r3.xyz, v0.z, c12[a0.x]
        add r2.xyz, r2, r3
        mul r3.xyz, v0.w, c13[a0.x]
        add r2.xyz, r2, r3
        mul r2.xyz, r0.w, r2
        add r0.xyz, r0, r2  // ::p<0,1,2>
        dp4 r0.w, v3, c138[aL]
        dp4 r1.w, v4, c138[aL]
        mul r1.w, r1.w, c142.x
        mova a0.x, r1.w
        mul r2.xyz, v1.x, c10[a0.x]
        mul r3.xyz, v1.y, c11[a0.x]
        add r2.xyz, r2, r3
        mul r3.xyz, v1.z, c12[a0.x]
        add r2.xyz, r2, r3
        add r2.xyz, r2, c138.w
        mul r2.xyz, r0.w, r2
        add r1.xyz, r1, r2  // ::n<0,1,2>
      endloop
      mov r0.xyz, r0  // position<0,1,2>
      mov r1.xyz, r1  // normal<0,1,2>
      mov r0.w, c138.x  // position<3>
    else
      mov r0.x, v0.x  // position<0>
      mov r0.y, v0.y  // position<1>
      mov r0.z, v0.z  // position<2>
      mov r0.w, v0.w  // position<3>
      mov r1.x, v1.x  // normal<0>
      mov r1.y, v1.y  // normal<1>
      mov r1.z, v1.z  // normal<2>
    endif
    mul r2, r0.x, c0
    mul r3, r0.y, c1
    add r2, r2, r3
    mul r3, r0.z, c2
    add r2, r2, r3
    mul r0, r0.w, c3
    add r0, r0, r2  // ::vout<0,1,2,3>

#line 23
    mov r2.xy, v2  // ::vout<8,9>
    mul r3, r1.x, c4
    mul r4, r1.y, c5
    add r3, r3, r4
    mul r1, r1.z, c6
    add r1, r1, r3
    add r1, r1, c138.w
    dp4 r2.z, r1, r1
    rsq r2.z, r2.z
    mul r1, r1, r2.z  // ::N<0,1,2,3>
    mov r3, -c9
    dp4 r2.z, r3, r3
    rsq r2.z, r2.z
    mul r3, r2.z, r3  // ::L<0,1,2,3>

#line 30
    mov r2.z, c138.w  // ::flag<0>
    mov r4.x, c138.w  // ::influence<0>
    mov r4.y, c138.w  // ::influence<1>
    mov r4.z, c138.w  // ::influence<2>
    loop aL, i0
      dp4 r2.w, v3, c138[aL]  // ::weight<0>
      if_lt c138.w, r2.w

#line 36
        dp4 r5.x, v4, c138[aL]
        if_lt r5.x, c138.x
          add r5.y, r5.x, -c138.w
          mov r5.z, -r5.y
          sge r5.y, r5.z, r5.y
          add r5.y, r5.y, c138.w
          mov r5.z, -r5.y
          if_lt r5.z, r5.y
            mov r4.x, r2.w  // ::influence<0>
          else
          endif
        else
          add r5.y, r5.x, -c138.x
          mul r5.y, r5.y, r5.y
          mov r5.z, -r5.y
          sge r5.y, r5.z, r5.y
          add r5.y, r5.y, c138.w
          mov r5.z, -r5.y
          if_lt r5.z, r5.y
            mov r4.y, r2.w  // ::influence<1>
          else
            add r5.x, r5.x, c142.w
            mul r5.x, r5.x, r5.x
            mov r5.y, -r5.x
            sge r5.x, r5.y, r5.x
            add r5.x, r5.x, c138.w
            mov r5.y, -r5.x
            if_lt r5.y, r5.x
              mov r4.z, r2.w  // ::influence<2>
            else
            endif
          endif
        endif
        mov r2.z, c138.x  // ::flag<0>
      else
      endif
    endloop
    if_ne r2.z, -r2.z
      mov r4.x, r4.x  // ::vout<4>
      mov r4.y, r4.y  // ::vout<5>
      mov r4.z, r4.z  // ::vout<6>
      mov r4.w, c138.x  // ::vout<7>
    else

#line 48
      dp4 r1.x, r3, r1
      max r1.x, r1.x, c138.w
      mul r4.xyz, r1.x, c8  // ::vout<4,5,6>
      mov r4.w, c8.w  // ::vout<7>
    endif
    mov oT0, r4  // ::main<4,5,6,7>
    mov r0.xy, r0  // ::main<0,1>
    mov r0.zw, r0  // ::main<2,3>
    mov oT1.xy, r2  // ::main<8,9>

#line 3
    mul r1.xy, r0.w, c144
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r0  // ::main<2,3>

// approximately 145 instruction slots used
vs_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer cb0[138], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   v3.x <- bone_weights.x; v3.y <- bone_weights.y; v3.z <- bone_weights.z; v3.w <- bone_weights.w; 
//   v4.x <- bone_indices.x; v4.y <- bone_indices.y; v4.z <- bone_indices.z; v4.w <- bone_indices.w; 
//   o2.x <- <main return value>.texcoord.x; o2.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 28 "F:\ï◊ã≠\èAêEçÏïi\ìríÜ\HelloWorld\JobCreate\skinned_mesh"
mov r0.x, l(0)  // r0.x <- flag

#line 8
itof r0.yzw, l(0, 0, 0, 0)  // r0.y <- p.x; r0.z <- p.y; r0.w <- p.z
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 12
itof r1.w, l(0)
lt r1.w, r1.w, v3.x
if_nz r1.w
  mov r1.w, l(0)
  mov r2.xyz, r0.yzwy  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
  mov r3.xyz, r1.xyzx  // r3.x <- n.x; r3.y <- n.y; r3.z <- n.z
  mov r2.w, r1.w
  loop 
    ilt r3.w, r2.w, l(4)
    breakc_z r3.w
    dp4 r3.w, v3.xyzw, icb[r2.w + 0].xyzw
    and r4.xyzw, v4.xyzw, icb[r2.w + 4].xyzw
    or r4.xy, r4.ywyy, r4.xzxx
    or r4.x, r4.y, r4.x
    imul null, r4.x, r4.x, l(4)
    mul r4.yzw, v0.xxxx, cb0[r4.x + 10].xxyz
    mul r5.xyz, v0.yyyy, cb0[r4.x + 11].xyzx
    add r4.yzw, r4.yyzw, r5.xxyz
    mul r5.xyz, v0.zzzz, cb0[r4.x + 12].xyzx
    add r4.yzw, r4.yyzw, r5.xxyz
    mul r5.xyz, v0.wwww, cb0[r4.x + 13].xyzx
    add r4.xyz, r4.yzwy, r5.xyzx
    mul r4.xyz, r3.wwww, r4.xyzx
    add r2.xyz, r2.xyzx, r4.xyzx
    dp4 r3.w, v3.xyzw, icb[r2.w + 0].xyzw
    itof r4.x, l(0)
    and r5.xyzw, v4.xyzw, icb[r2.w + 4].xyzw
    or r4.yz, r5.yywy, r5.xxzx
    or r4.y, r4.z, r4.y
    imul null, r4.y, r4.y, l(4)
    mul r5.xyz, v1.xxxx, cb0[r4.y + 10].xyzx
    mul r6.xyz, v1.yyyy, cb0[r4.y + 11].xyzx
    add r5.xyz, r5.xyzx, r6.xyzx
    mul r6.xyz, v1.zzzz, cb0[r4.y + 12].xyzx
    add r5.xyz, r5.xyzx, r6.xyzx
    mul r4.xyz, r4.xxxx, cb0[r4.y + 13].xyzx
    add r4.xyz, r4.xyzx, r5.xyzx
    mul r4.xyz, r3.wwww, r4.xyzx
    add r3.xyz, r3.xyzx, r4.xyzx
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r2.xyz, r2.xyzx  // r2.x <- position.x; r2.y <- position.y; r2.z <- position.z
  mov r0.y, l(1.000000)  // r0.y <- position.w
  mov r3.xyz, r3.xyzx  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z
else   // Prior locations: r0.y <- p.x; r0.z <- p.y; r0.w <- p.z; r1.x <- n.x; r1.y <- n.y; r1.z <- n.z
  mov r2.x, v0.x  // r2.x <- position.x
  mov r2.y, v0.y  // r2.y <- position.y
  mov r2.z, v0.z  // r2.z <- position.z
  mov r0.y, v0.w  // r0.y <- position.w
  mov r3.x, v1.x  // r3.x <- normal.x
  mov r3.y, v1.y  // r3.y <- normal.y
  mov r3.z, v1.z  // r3.z <- normal.z
endif 
mul r1.xyzw, r2.xxxx, cb0[0].xyzw
mul r4.xyzw, r2.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r4.xyzw
mul r2.xyzw, r2.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.yyyy, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- vout.position.x; r1.y <- vout.position.y; r1.z <- vout.position.z; r1.w <- vout.position.w

#line 23
mov r0.yz, v2.xxyx  // r0.y <- vout.texcoord.x; r0.z <- vout.texcoord.y
itof r0.w, l(0)  // r0.w <- normal.w
mul r2.xyzw, r3.xxxx, cb0[4].xyzw
mul r4.xyzw, r3.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, r4.xyzw
mul r3.xyzw, r3.zzzz, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r0.wwww, cb0[7].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
dp4 r0.w, r2.xyzw, r2.xyzw
rsq r0.w, r0.w
mul r2.xyzw, r0.wwww, r2.xyzw  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z; r2.w <- N.w
mov r3.xyzw, -cb0[9].xyzw
dp4 r0.w, r3.xyzw, r3.xyzw
rsq r0.w, r0.w
mul r3.xyzw, r0.wwww, r3.xyzw  // r3.x <- L.x; r3.y <- L.y; r3.z <- L.z; r3.w <- L.w

#line 29
itof r4.xyzw, l(0, 0, 0, 1)  // r4.x <- influence.x; r4.y <- influence.y; r4.z <- influence.z; r4.w <- influence.w
mov r0.w, l(0)  // r0.w <- i
mov r5.xyz, r4.xyzx  // r5.x <- influence.x; r5.y <- influence.y; r5.z <- influence.z
mov r5.w, r0.x  // r5.w <- flag
mov r6.x, r0.w  // r6.x <- i
loop 
  ilt r6.y, r6.x, l(4)
  breakc_z r6.y
  dp4 r6.y, v3.xyzw, icb[r6.x + 0].xyzw  // r6.y <- weight
  lt r6.z, l(0.000000), r6.y
  if_nz r6.z
    mov r5.w, l(-1)
    and r7.xyzw, v4.xyzw, icb[r6.x + 4].xyzw
    or r6.zw, r7.yyyw, r7.xxxz
    or r6.z, r6.w, r6.z
    switch r6.z
      case l(0)
      mov r5.x, r6.y
      mov r5.xyz, r5.xyzx
      break 
      case l(1)
      mov r5.y, r6.y
      mov r5.xyz, r5.xyzx
      break 

#line 40
      case l(2)
      mov r5.z, r6.y
      mov r5.xyz, r5.xyzx
      break 
      default 
      break 
    endswitch 
  endif 
  iadd r6.x, r6.x, l(1)
endloop 
mov r4.xyz, r5.xyzx  // r4.x <- influence.x; r4.y <- influence.y; r4.z <- influence.z
if_nz r5.w
  mov r4.xyz, r4.xyzx  // r4.x <- vout.color.x; r4.y <- vout.color.y; r4.z <- vout.color.z
  mov r4.w, r4.w  // r4.w <- vout.color.w
else 
  itof r0.x, l(0)
  dp4 r0.w, r3.xyzw, r2.xyzw
  max r0.x, r0.w, r0.x
  mul r4.xyz, r0.xxxx, cb0[8].xyzx  // r4.x <- vout.color.x; r4.y <- vout.color.y; r4.z <- vout.color.z
  mov r4.w, cb0[8].w  // r4.w <- vout.color.w
endif 

#line 52
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r4.xyzw
mov o2.xy, r0.yzyy
ret 
// Approximately 128 instruction slots used
