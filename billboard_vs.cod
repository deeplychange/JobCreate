//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 material_color;             // Offset:  128 Size:    16
//   float4 light_direction;            // Offset:  144 Size:    16 [unused]
//   float2 world_texcoord;             // Offset:  160 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CONSTANT_BUFFER                   cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float       
// NORMAL                   0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             0         4  ( FLT, FLT, FLT, FLT)
// c5         cb0             8         1  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    dcl_texcoord v0  // position<0,1,2,3>
    dcl_texcoord3 v3  // texcoord<0,1>

#line 6 "F:\ÂãâÂº∑\Â∞±ËÅ∑‰ΩúÂìÅ\ÈÄî‰∏≠\HelloWorld\JobCreate\billboard_vs.hlsl"
    mul r0, v0.x, c1
    mul r1, v0.y, c2
    add r0, r0, r1
    mul r1, v0.z, c3
    add r0, r0, r1
    mul r1, v0.w, c4
    add r0, r0, r1  // ::vout<0,1,2,3>

#line 13
    mov r1, c5  // ::vout<4,5,6,7>
    mov r2.xy, v3  // ::vout<12,13>
    mov oT0, r1  // ::main<4,5,6,7>
    mov r0.xy, r0  // ::main<0,1>
    mov r0.zw, r0  // ::main<2,3>
    mov oT2.xy, r2  // ::main<12,13>

#line 3
    mul r1.xy, r0.w, c0
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r0  // ::main<2,3>

// approximately 16 instruction slots used
vs_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_input v0.xyzw
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o3.xy
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- color.x; v1.y <- color.y; v1.z <- color.z; v1.w <- color.w; 
//   v2.x <- normal.x; v2.y <- normal.y; v2.z <- normal.z; v2.w <- normal.w; 
//   v3.x <- texcoord.x; v3.y <- texcoord.y; 
//   o2.x <- <main return value>.normal.x; o2.y <- <main return value>.normal.y; o2.z <- <main return value>.normal.z; o2.w <- <main return value>.normal.w; 
//   o3.x <- <main return value>.texcoord.x; o3.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 6 "F:\ï◊ã≠\èAêEçÏïi\ìríÜ\HelloWorld\JobCreate\billboard"
mul r0.xyzw, v0.xxxx, cb0[0].xyzw
mul r1.xyzw, v0.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.wwww, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 13
mov r1.xyzw, cb0[8].xyzw  // r1.x <- vout.color.x; r1.y <- vout.color.y; r1.z <- vout.color.z; r1.w <- vout.color.w
mov r2.xy, v3.xyxx  // r2.x <- vout.texcoord.x; r2.y <- vout.texcoord.y
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o3.xy, r2.xyxx
ret 
// Approximately 13 instruction slots used
